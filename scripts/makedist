#
# This script is designed to run without any arguments: this will build
# all of the available distributions.  Restricting the build to specific
# distributions can be done by listing the names of the desired distributions
# on the command line.
#
# There is currently only one PHP distribution: nextcloud-api
#
# SYNOPSIS
#    makedist [OPTIONS] [DISTNAME ...]
#
# OPTIONS
#    -l, --list               list the names of the supported distributions and
#                             exit without building.
#    --dist-dir=DIR           The output directory to write the distribution
#                             products into.
#    -d DIR, --source-dir=DIR  the directory containing the python source code
#                             (default: ./python)
#    -c DIR, --cache-dir=DIR  directory for holding intermediate or cache-able
#                             products (currently not used); this can be shared
#                             with other similar packages to avoid redundant 
#                             re-building.
#    -v VER, --version=VER    assign VER as the VERSION for this product
#
# DISTNAMES
#    nextcloud-api
#   

set -e
prog=`basename $0`
execdir=`dirname $0`
[ "$execdir" = "" -o "$execdir" = "." ] && execdir=$PWD

# this is needed because realpath is not on macs
function realpath {
    if [ -d "$1" ]; then
        (cd $1 && pwd)
    elif [ -f "$1" ]; then
        file=`basename $1`
        parent=`dirname $1`
        realdir=`(cd $parent && pwd)`
        echo "$realdir/$file"
    elif [[ $1 = /* ]]; then
        echo $1
    else
        echo "$PWD/${1#./}"
    fi
}

execdir=`realpath $execdir`
PACKAGE_DIR=`dirname $execdir`
SOURCE_DIR=$PACKAGE_DIR/php
DIST_DIR=$PACKAGE_DIR/dist
VERSION=


# Update this list with the names of the individual component names
# 
DISTNAMES=(nextcloud-api)

# handle command line options
while [ "$1" != "" ]; do 
  case "$1" in
    --list|-l)
        echo "Available distributions: $DISTNAMES"
        exit 0
        ;;
    --dist-dir=*)
        DIST_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    --dist-dir)
        shift
        DIST_DIR=$1
        ;;
    --source-dir=*|--dir=*)
        SOURCE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    -d|--dir|--source-dir)
        shift
        SOURCE_DIR=$1
        ;;
    --cache-dir=*)
        CACHE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        # NOTE: CACHE_DIR is ignored
        ;;
    -c|--cache-dir)
        shift
        CACHE_DIR=$1
        # NOTE: CACHE_DIR is ignored
        ;;
    -v|--version)
        shift
        VERSION=$1
        ;;
    --version=*)
        VERSION=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    -*)
        echo "$prog: unsupported option:" $1
        false
        ;;
    npsbroker)
        # assuming just one distribution
        true
        ;;
    *)
        echo "${prog}: ${1}: unrecognized distribution name"
        false
        ;;
  esac
  shift
done

true ${DIST_DIR:=$PACKAGE_DIR/dist}
BUILD_DIR=$PACKAGE_DIR/build
mkdir -p $BUILD_DIR $DIST_DIR


# set the current version.  This will inject the version into the code, if 
# needed.
#
(cd $PACKAGE_DIR && ./scripts/setversion.sh)

# don't reset the version unnecessarily as it may have been done by makedist
# 
[ -z "$VERSION" -a -f "$PACKAGE_DIR/VERSION" ] || {
    echo '+' scripts/setversion.sh $VERSION
    scripts/setversion.sh $VERSION
}

[ -n "$PACKAGE_NAME" ] || PACKAGE_NAME=`cat $PACKAGE_DIR/VERSION | awk '{print $1}'`
version=$VERSION
[ -n "$version" ] || version=`cat $PACKAGE_DIR/VERSION | awk '{print $2}'`
vers4fn=`echo $version | perl -pe 's#[/ \t]+#_#g'`

echo '#########################'
echo '#'
echo "# Building ${DISTNAMES[0]}"...
echo '#'
echo '#########################'

# build the components
installdir=$BUILD_DIR/nextcloud-api
set -x
mkdir -p $installdir

cp -r $PACKAGE_DIR/php/* $installdir

# ENTER COMMANDS for creating the dependency file(s)
#
# A dependency file should be called DISTNAME-${version}_dep.json
mkdir -p $DIST_DIR
if [ -n "$PHPPATH" ]; then
    export PHPPATH=$installdir/lib/php:$PHPPATH
else
    export PHPPATH=$installdir/lib/php
fi

echo "bundle creation"
# Bundle the distribution
(cd $BUILD_DIR && zip -qr $DIST_DIR/${DISTNAMES[0]}-${vers4fn}.zip nextcloud-api)

set +x
echo Created distribution in dist directory: 
echo ${DISTNAMES[0]}-${vers4fn}.zip
